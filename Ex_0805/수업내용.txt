객체지향프로그래밍( OOP )
-객체를 지향하는 프로그래밍 방법
-객체란 우리 실생활에 존재하는 모든것으로 생각 할 수 있다.
-객체는 상태를 표현할 수 있고, 행동을 정의할 수 있다
-객체를 중심으로 프로그램 구조를 설계하고 프로그래밍 하는 것을 객체지향프로그래밍이라고 한다.

클래스( Class )
객체를 생성하기 위한 설명서이다.
어떤 물건을 만들기 위한 메뉴얼이라고 생각하면 된다.
클래스를 기반으로 객체를 생성해야 한다.
하나의 설명서로 여러개의 물건을 만들 수 있듯이, 자바에서는 하나의 클래스로 여러 개의 객체를 생성할 수 있다.

접근제한자 class 클래스명{

}

접근제한자 : 클래스의 접근 범위를 제한한다.
class : class를 선언함을 뜻한다.
클래스명 : 변수처럼 이름을 가지고, 객체를 생성할 때 사용한다.

클래스의 종류
1. 실행용 클래스
-프로그램 전체에서 단 하나의 클래스
-main메서드를 갖고있으며, 다른 클래스에서 사용되지 않는다.

2. 객체생성용 클래스
-다른 클래스에서 사용할 못적으로 선언되는 클래스

클래스의 구성

1. 필드(field)
객체가 가져야할 데이터의 상태를 저장하는 변수를 말한다.
필드, 전역변수, 멤버 변수 라고 부르는데 다 같은말이다.
필드의 값을 초기화 하지 않으면 객체 생성시 자동으로 기본값으로 초기화 된다.

객체명.필드명
객체명 : 클래스를 이용해 만든 객체의 이름
필드명 : 만든 객체가 가지고 있는 필드의 이름

2. 메서드
객체의 기능을 담당하는 중괄호({})블록을 말한다.
특정 기능을 수행하는 코드를 따로 빼서 중괄호 안에 작성하며, 
1개의 메서드는 일반적으로 1개의 기능을 수행한다.

반환형 메서드명(파라미터){ //머리
	작업할 내용
	return 반환값;
}

상황에 따라서 필요하지 않다면 파라미터와 return값은 없어도 된다.

c#에서 함수임


3. 생성자
객체를 생성할 때 반드시 호출해야 하는 특수한 기능을 하는 메서드
체를 생성하면서 객체 변수를 초기화하는 역할


정적멤버와 static
클래스 안에서 선언된 필드와 메서드를 클래스 멤버라고도 부른다.
클래스에 포함된 요소라는 의미로 '멤버'라는 용어를 사용한다.


메서드 사용의 이점
1. 같은 내용의 코드를 반복적으로 사용하는 것을 피할 수 있다.
2. 반복되는 문장들을 묶어서 메서드로 작성해놓으면 필요할 때마다 재사용이 가능
3. 모듈화
4. 가독성이 좋아지며, 프로그램을 수정할 때 더욱 빠르고 쉽게 할 수 있다.

메서드 선언
메서드는 크게 선언부(signature)와 실제 영역(body)로 구성

접근 제한자 반환타입 메서드명(){
	//기능을 수행하는 코드
}

접근제한자란??
클래스/메서드/필드에 대한 접근을 어디범위까지 제한하느냐에 대한 지시어

접근 제한자 종류
public : 모든 접근을 허용. 같은 프로젝트 내의 모든 객체들이 사용할 수 있도록 허용.
private : 현재 클래스 내에서만 사용을 허가.
protected : 상속관계의 객체들에만 사용을 허가.
default : 같은 패키지(폴더)내의 객체에만 사용을 허가(아무것도 쓰지 않으면 default)

반환타입(return Type)
메서드를 호출하면 메서드는 블록 안에 있는 코드들을 실행한 후 결과값을 반환한다.
이때 결과값을 어떤타입으로 반환할것인지 미리 정해주는것이다.
반환값이 없는 경우 타입으로 'void'를 쓰면 된다.

메서드명(함수명)
메서드명은 말그대로 메서드의 이름(첫글자는 소문자로 시작한다.)
메서드를 호출할 때 사용한다.

2개 이상의 메서드 선언하기
메서드는 같은 클래스에 있는 필드를 사용할 수 있다.
하나의 클래스에 2개 이상의 메서드를 사용하는 것 역시 가능하다.

매개변수
특정 기능을 수행하기 위한 메서드는 기능을 수행할 때 필요한 값을 전달받을 수 있다
매개변수는 사용할 값을 받는 변수이다

접근제한자 반환타입 메서드명(자료형 변수명){
	//기능을 수행할 코드
}
매개변수는 '매개변수의 자료형'과'매개 변수명'으로 선언할 수 있다.

return
함수에서 모든 작업을 마치고 경우에 따라 실행한 결과를 호출한곳으로 다시 돌려주기도 한다.
이것을 '반환한다'라고 표현한다
반환하는 결과값을 '반환값'이라고 부르기도 한다.
리턴값이 있을 경우에는 리턴할 데이터의 타입이 무엇인지 반환형에 기재해줘야 한다.
리턴값이 없는 경우 메서드를 종료하기 위해 return을 사용할 수 있다.
접근제한자 반환타입 메서드명(){
	//기능을 수행할 코드들
	...
	return 결과값;
}
매개변수와 마찬가지로 리턴값의 자료형은 제한이 없다.
자바에서 사용하는 모든 자료형을 반환타입으로 사용할 수 있다.