컬렉션 프레임워크(Collection FrameWork)

한번 정한 배열은 크기 변경 및 삭제할 수 없으며
index를 이용하여 데이터를 저장해야한다

List(리스트), Queue(큐), Tree(트리) 구조 -> Collection

List	
순서가 있는 데이터의 집합		
데이터 중복 허용 O			
ArrayList, LinkedList

Set	
순서를 유지하지 않는 집합		
데이터 중복 허용 X			
HashSet, LinkedHashSet

Map	
키(Key)와 값(Value)으로 이루어진 집합
순서유지 X, 키 중복 X, 값 중복 O	
HashMap, LinkedHashMap, Properties

제네릭
클래스나 메서드 내부에 사용될 데이터 타입의 안정성을 높일 수 있고,
클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법
객체별로 다른 타입의 자료가 저장될 수 있다

Generic 선언 및 생성
클래스 또는 인터페이스 이름 뒤에 <>(다이아몬드 연산자) 기호를 추가하고
안에 식별자 기호를 지정하여 파라미터화 할 수 있다.
타입 매개변수(parameter)/타입 변수라고 명칭함

public class 클래스명<T>{...}
public interface 인터페이스명<T>{...}

제네릭의 표현변수를 T로 표현하며 S,U로 이어짐(for 변수 i 인것처럼 암묵적 규칙)
<T>	타입(Type)
<E>	요소(Element)
<K>	키(Key)
<V>	값(Value)
<N>	숫자(Number)

List컬렉션
List는 중복이 허용되면서 저장 순서가 유지되는 구조를 제공
배열처럼 index를 사용해 데이터를 저장하고 찾게 된다.
크기의 제한이 없으며 삽입,삭제,변경의 기능이 자유롭다.

메서드			동작		기능 설명
void add(E e)		삽입		데이터를 순차적으로 삽입
void add(int index,E e)	중간 삽입		원하는 index 위치에 삽입
void set(int index,E e)	치환		원하는 index 위치의 값 변경
E get(int index)		반환		선택된 index위치의 값 반환
void remove(int index)	삭제		선택된 index위치의 값 삭제
void clear()		전체삭제		모든 데이터 삭제
int size()			크기		저장된 데이터의 개수 반환
boolean contains(Object o)	검색		데이터 존재 여부 확인

데이터를 삭제할 때는  remove(int index)와 remove(Object o) 이용한다.
remove(int index)는 특정 위치의 데이터를 삭제하고
remvoe(Object o)는 저장한 데이터를 삭제한다.

반복자(Iterator)
List 컬렉션의 요소를 순회하여 하나씩 추출하는데 사용한다.
반복자라고도 불리는 Iterator객체는 선언된 컬렉션 객체에서 가져와 사용된다.

Iterator메서드
메서드		기능 설명
boolean hasNext()	다음에 순회할 데이터 유뮤 확인 가져올 객체가 있으면 true,없으면 false를 반환
E next()		다음 위치의 데이터로 이동하여 반환