TreeSet
이진탐색트리라고 부르며 성능을 향상시킨 레드블랙트리로 구현됨
부모노드보다 작은 값을 가지는 노드는 왼쪽 큰 값은 오른쪽으로 배치된다
데이터의 추가나 삭제시 트리가 한쪽으로 치우쳐지지않도록 균형을 맞춤

Map
List와 Set과 달리 인터페이스가 별도 존재함
Key와 Value값으로 저장함(C# Dictionary 형식)

containsKey(key) / containsValue(value)
map함수에 key와 value가 있는지 확인하는 함수


HashMap
map을 구현하고있는 자식클래스

제너릭 <>
클래스 내부에서 사용할 타입을 외부에서 지정해주는 방식

제네릭 사용시 주의사항
1. 제네릭 타입의 객체는 생성할 수 없다.
   제네릭 타입 자체로 타입을 지정하여 객체를 생성하는 것은 불가능하다

2. static 멤버에 제네릭 타입이 올 수 없음
   static 변수의 데이터 타입으로 제네릭 타입 파라미터가 올 수는 없다
   static 멤버는 클래스가 동일하게 공유하는 변수로서 이미 자료 타입이 정해져 있어야 하기 때문이다

3. 제네릭으로 배열 선언 주의점
   제네릭 클래스 자체를 배열로 만들 수는 없다.

중첩타입 파라미터
제네릭 객체를 제네릭 타입 파라미터로 받는 형식

제너릭메서드
메서드에만 적용되는 제네릭타입

제너릭 범위 한정
<T extends [제한타입]>

다중 타입 한정 ( 선언자에서 클래스는 불가, 인터페이스에서만 가능함 )
class BoxType implements 제한타입, 제한타입{}
<T extends 제한타입 & 제한타입>

제네릭 와일드 카드 문법
제네릭 간의 형 변환을 성립시키기 위해 사용

<?> : Unbounded Wildcards(제한 없음)
타입 파라미터를 대치하는 구체적인 타입으로 모든 클래스나 인터페이스 타입이 올 수 있다.

<? extends 상위타입> : Upper Bounded Wildcards(상위 클래스 제한)
타입 파라미터를 대치하는 구체적인 타입으로 상위 타입이나 상위 타입의 하위 타입만 올 수 있다.

<? super 하위타입> : Lower Bounded Wildcards(하위 클래스 제한)
타입 파라미터를 대치하는 구체적인 타입으로 하위 타입이나 하위 타입의 상위 타입만 올 수 있다.


람다식
익명 함수(anonymous function)를 만들기 위한 표현식